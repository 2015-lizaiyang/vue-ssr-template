const path = require('path');
// const fs = require('fs');
const MFS = require('memory-fs');
const webpack = require('webpack');
const clientConfig = require('./webpack.client.config');
const serverConfig = require('./webpack.server.config');

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
  } catch (e) {}
};

module.exports = function setupDevServer(app, cb) {
  let bundle, clientManifest;

  let ready;
  const readyPromise = new Promise(r => {
    ready = r;
  });
  const update = () => {
    console.log('update', !!bundle, !!clientManifest);
    if (bundle && clientManifest) {
      ready();
      cb(bundle, {
        clientManifest,
      });
    }
  };
  // modify client config to work with hot middleware
  clientConfig.entry.app = [
    'webpack-hot-middleware/client',
    clientConfig.entry.app,
  ];
  clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin());

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    stats: false,
    // logLevel: 'silent',
  });
  app.use(devMiddleware);
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson('minimal');

    stats.errors.forEach(err => console.error(err));
    stats.warnings.forEach(err => console.warn(err));
    if (stats.errors.length) return;

    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json',
    ));

    update();
  });

  // hot middleware
  app.use(
    require('webpack-hot-middleware')(clientCompiler, {
      heartbeat: 5000,
      log: false,
    }),
  );

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson('minimal');
    if (stats.errors.length) return;

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));
    update();
  });
  return readyPromise;
};
